name: refarch-stack

services:
  postgres:
    image: postgres:16.8-alpine3.20@sha256:951d0626662c85a25e1ba0a89e64f314a2b99abced2c85b4423506249c2d82b0
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    ports:
      - "5432:5432"
    healthcheck: &healthcheck
      test: ["CMD-SHELL", "pg_isready -d postgres -U admin"]
      interval: 30s
      timeout: 60s
      retries: 3
      start_period: 60s
    security_opt: &security_settings
      - no-new-privileges:true

  # see https://event-driven.io/en/automatically_connect_pgadmin_to_database/
  pg-admin:
    image: dpage/pgadmin4:9.2.0@sha256:52cb72a9e3da275324ca0b9bb3891021366d501aad375db34584a7bca8ce02ff
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      - PGADMIN_LISTEN_PORT=5050
    ports:
      - "5050:5050"
    depends_on:
      - postgres
    healthcheck:
      <<: *healthcheck
      test: ["CMD", "wget", "-O", "-", "http://localhost:5050/misc/ping"]
    security_opt: *security_settings
    volumes:
      - './pgadmin/servers.json:/pgadmin4/servers.json:ro'
      - './pgadmin/pgpass:/pgadmin4/pgpass'
    user: root # see https://github.com/pgadmin-org/pgadmin4/issues/6257
    entrypoint: /bin/sh -c "chmod 600 /pgadmin4/pgpass; /entrypoint.sh;" # see https://www.postgresql.org/docs/current/libpq-pgpass.html#LIBPQ-PGPASS (last paragraph)

  keycloak:
    image: keycloak/keycloak:26.2.0@sha256:87758ff2293c78c942c7a1f0df2bc13e0f943fcf0c0d027c12fdfac54a35d93b
    command:
      - start-dev
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
      - KC_HEALTH_ENABLED=true
      - KC_HTTP_PORT=8100
      - KC_HTTP_RELATIVE_PATH=/auth
    ports:
      - "8100:8100"
    volumes:
      - ./keycloak/plugins:/opt/keycloak/providers/
    networks:
      - keycloak
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then exit 0;else exit 1;fi;"]
    security_opt: *security_settings

  init-keycloak:
    image: klg71/keycloakmigration:0.2.81@sha256:2c73c904a644b75637a01434f357caee9c029f37bd8960793c68233d5afa468a
    depends_on:
      - keycloak
    environment:
      ADMIN_USER: admin
      ADMIN_PASSWORD: admin
      BASEURL: http://keycloak:8100/auth
      WAIT_FOR_KEYCLOAK: 'true'
      FAIL_ON_UNDEFINED_VARIABLES: 'true'
      KEYCLOAK_CHANGELOG: /migration/keycloak-changelog.yml
    volumes:
      - './keycloak/migration:/migration'
    networks:
      - keycloak
    security_opt: *security_settings

  refarch-gateway:
    image: ghcr.io/it-at-m/refarch/refarch-gateway:1.5.0@sha256:9ebe76275d7aa7863f66e600ed91aa10c538faa183e06c0a6b3ef87fceb88315
    depends_on:
      init-keycloak:
        condition: service_completed_successfully
    ports:
      - "8083:8080"
    environment:
      - ALLOWED_ORIGINS_PUBLIC=http://localhost:*, http://kubernetes.docker.internal:8100
      - ALLOWED_ORIGINS_CLIENTS=http://localhost:*
      - SPRING_CLOUD_GATEWAY_ROUTES_0_ID=sso
      - SPRING_CLOUD_GATEWAY_ROUTES_0_URI=http://kubernetes.docker.internal:8100/
      - SPRING_CLOUD_GATEWAY_ROUTES_0_PREDICATES_0=Path=/api/sso/userinfo
      - SPRING_CLOUD_GATEWAY_ROUTES_0_FILTERS_0=RewritePath=/api/sso/userinfo, /auth/realms/local_realm/protocol/openid-connect/userinfo
      - SPRING_CLOUD_GATEWAY_ROUTES_1_ID=backend
      - SPRING_CLOUD_GATEWAY_ROUTES_1_URI=http://host.docker.internal:39146/
      - SPRING_CLOUD_GATEWAY_ROUTES_1_PREDICATES_0=Path=/api/ej-app-backend-service/**
      - SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0=RewritePath=/api/ej-app-backend-service/(?<urlsegments>.*), /$\{urlsegments}
      - SPRING_CLOUD_GATEWAY_ROUTES_2_ID=backendonline
      - SPRING_CLOUD_GATEWAY_ROUTES_2_URI=http://host.docker.internal:39146/
      - SPRING_CLOUD_GATEWAY_ROUTES_2_PREDICATES_0=Path=/public/backend/**
      - SPRING_CLOUD_GATEWAY_ROUTES_2_FILTERS_0=RewritePath=/public/backend/(?<urlsegments>.*), /$\{urlsegments}
      - SPRING_CLOUD_GATEWAY_ROUTES_3_ID=backendaenderungsservice
      - SPRING_CLOUD_GATEWAY_ROUTES_3_URI=http://host.docker.internal:39146/
      - SPRING_CLOUD_GATEWAY_ROUTES_3_PREDICATES_0=Path=/public/aenderungsservice/**
      - SPRING_CLOUD_GATEWAY_ROUTES_3_FILTERS_0=RewritePath=/public/aenderungsservice/(?<urlsegments>.*), /$\{urlsegments}
      - SPRING_CLOUD_GATEWAY_ROUTES_4_ID=online
      - SPRING_CLOUD_GATEWAY_ROUTES_4_URI=http://host.docker.internal:8082/
      - SPRING_CLOUD_GATEWAY_ROUTES_4_PREDICATES_0=Path=/public/online/**
      - SPRING_CLOUD_GATEWAY_ROUTES_5_ID=frontend
      - SPRING_CLOUD_GATEWAY_ROUTES_5_URI=http://host.docker.internal:8081/
      - SPRING_CLOUD_GATEWAY_ROUTES_5_PREDICATES_0=Path=/**
      - SPRING_PROFILES_ACTIVE=test, hazelcast-local
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUERURI=http://kubernetes.docker.internal:8100/auth/realms/local_realm
      - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_SSO_ISSUERURI=$${spring.security.oauth2.resourceserver.jwt.issuer-uri}
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_SSO_PROVIDER=sso
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_SSO_CLIENTID=ej-app
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_SSO_CLIENTSECRET=client_secret
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_SSO_SCOPE=profile, openid
      - REFARCH_SECURITY_CSRF_WHITELISTED=/public/aenderungsservice/**
    networks:
      - keycloak
    extra_hosts:
      - "host.docker.internal:host-gateway" # Bleibt in Docker
    healthcheck:
      <<: *healthcheck
      test: [ "CMD-SHELL", "curl http://localhost:8080/actuator/health/liveness" ]
    security_opt: *security_settings

  appswitcher-server:
    image: ghcr.io/it-at-m/appswitcher-server:1.2.3@sha256:8a6b7f111e003b2885047c73ec04940c358c589fe3c833362093b9a4334480c6
    environment:
      - SPRING_WEB_RESOURCES_STATIC_LOCATIONS=file:/workspace/static
      - THC_PATH=/actuator/health/liveness
    ports:
      - "8084:8080"
    volumes:
      - "./appswitcher-server/application.yml:/workspace/config/application.yml"
      - "./appswitcher-server/static:/workspace/static"
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "/workspace/health-check"]
    security_opt: *security_settings

  # If the backend is to be started in the Docker-Compose, the following command must be executed at startup:
  # docker-compose --profile=backend up
  # oder e.g.:
  # docker-compose --profile=backend --profile=frontend --profile=online --profile=aenderungsservice --profile=eai u
  backend:
    profiles:
      - backend
    image:  ghcr.io/it-at-m/ehrenamt-justiz/ehrenamt-justiz-backend:latest@sha256:78b97fa6fb8b152ae17c34cca3f7b64a73c029b1bde8f33867f95be12a977330
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "39146:39146"
    networks:
      - keycloak
    healthcheck:
      <<: *healthcheck
      test: [ "CMD-SHELL", "curl http://localhost:39146/actuator/health/liveness" ]


  # If the frontend is to be started in the Docker-Compose, the following command must be executed at startup:
  # docker-compose --profile=frontend up
  # oder e.g.:
  # docker-compose --profile=backend --profile=frontend --profile=online --profile=aenderungsservice --profile=eai up
  frontend:
    profiles:
      - frontend
    image:  ghcr.io/it-at-m/ehrenamt-justiz/ehrenamt-justiz-frontend:latest@sha256:9edbcc82b6436b05904b451527df87a258b995ae107f4ec9c6af535fde8ba6fe
    ports:
      - "8081:8080"
    networks:
      - keycloak

  # If the online app is to be started in the Docker-Compose, the following command must be executed at startup:
  # docker-compose --profile=online up
  # oder e.g.:
  # docker-compose --profile=backend --profile=frontend --profile=online --profile=aenderungsservice --profile=eai up
  online:
    profiles:
      - online
    image:  ghcr.io/it-at-m/ehrenamt-justiz/ehrenamt-justiz-online:latest@sha256:75d03dc606947a4a3eef04c08dbff5b6eb8f48fa168fa5a9760cd8f2f1eac98a
    ports:
      - "8082:8080"
    networks:
      - keycloak

  # To start the EAI in the local Docker, the script “entrypoint.sh” under ./ehrenamt-justiz-eai must be extended so that
  # the necessary certificates are integrated. See documentation there.
  # If the EAI is to be started in the Docker-Compose, the following command must be executed at startup:
  # docker-compose --profile=eai up
  # oder e.g.:
  # docker-compose --profile=backend --profile=frontend --profile=online --profile=aenderungsservice --profile=eai up
  eai:
    profiles:
      - eai
    image: ghcr.io/it-at-m/ehrenamt-justiz/ehrenamt-justiz-eai:latest@sha256:da68552b0e19cce4112cf289314a3877f11260ec7ffeff00d908873166e03943
    volumes:
      - ../ehrenamt-justiz-eai/entrypoint.sh:/usr/local/bin/entrypoint.sh:rwx
    entrypoint: ["/usr/local/bin/entrypoint.sh"]
    ports:
      - "8085:8085"
    networks:
      - keycloak
    healthcheck:
      <<: *healthcheck
      test: [ "CMD-SHELL", "curl http://localhost:8085/actuator/health/liveness" ]

  # If the Änderungsservice is to be started in the Docker-Compose, the following command must be executed at startup:
  # docker-compose --profile=aenderungsservice up
  # oder e.g.:
  # docker-compose --profile=backend --profile=frontend --profile=online --profile=aenderungsservice --profile=eai up
  aenderungsservice:
    profiles:
      - aenderungsservice
    image: ghcr.io/it-at-m/ehrenamt-justiz/ehrenamt-justiz-aenderungsservice:latest
    ports:
      - "8086:8086"
    networks:
      - keycloak
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "curl http://localhost:8086/actuator/health/liveness"]

networks:
  keycloak:
